/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pscraper;

import Handlers.ProgressHandler;
import Handlers.StateHandler;
import Events.StateEvt;
import Events.ProgressEvt;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;

import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;

import com.formdev.flatlaf.FlatDarculaLaf;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;

/**
 *
 * @author Asmod
 */
public class ScraperGUI extends javax.swing.JFrame {

    public static boolean running = false;

    private Thread scraperThread = null;

    private PractiScoreScraper scraper = null;

    private List<Match> matches;

    private final int FNAME_IDX  = 0;
    private final int URL_IDX    = 1;
    private final int STGCNT_IDX = 2; 

    /**
     * Creates new form ScraperGUI
     */
    public ScraperGUI() {
        initComponents();

        progressBar.setMaximum(100);
        progressBar.setMinimum(0);
        progressBar.setStringPainted(true);

        matches = new ArrayList<>();
    }

    /* State and Progress Event Handlers */
    ProgressHandler progHandler = new ProgressHandler () {
        
        @Override
        public void handleProgressEvt(ProgressEvt evt){
            progressBar.setValue(evt.progress);
        }
    };

    StateHandler stateHandler = new StateHandler () {
        
        @Override
        public void handleStateEvt(StateEvt evt){

            if(evt.stateText.contains("KILL")) {
                killScraper();
            
            } else if (evt.stateText.contains("COMPLETE")) {
                stateText.setText("Scrape complete!");
                scrapeButton.setText("Scrape!");;
                running = false;

                scraper       = null;
                scraperThread = null;

            } else {
                stateText.setText(evt.stateText);
            }
        }
    };


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        divisonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        inputField = new javax.swing.JTextField();
        progressBar = new javax.swing.JProgressBar();
        scrapeButton = new javax.swing.JButton();
        statePanel = new javax.swing.JPanel();
        stateLabel = new javax.swing.JLabel();
        stateText = new javax.swing.JLabel();
        headlessMode = new javax.swing.JRadioButton();
        coButton = new javax.swing.JRadioButton();
        lButton = new javax.swing.JRadioButton();
        loButton = new javax.swing.JRadioButton();
        oButton = new javax.swing.JRadioButton();
        pccButton = new javax.swing.JRadioButton();
        pButton = new javax.swing.JRadioButton();
        ssButton = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PractiScore Scraper");
        setMaximumSize(new java.awt.Dimension(500, 250));
        setMinimumSize(new java.awt.Dimension(500, 250));
        setPreferredSize(new java.awt.Dimension(500, 250));
        setResizable(false);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Match Info"));
        mainPanel.setMaximumSize(new java.awt.Dimension(300, 100));
        mainPanel.setMinimumSize(new java.awt.Dimension(300, 100));
        mainPanel.setPreferredSize(new java.awt.Dimension(300, 100));
        mainPanel.setLayout(new java.awt.GridBagLayout());

        inputField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        inputField.setText("Input Stage File");
        inputField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                inputFieldMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainPanel.add(inputField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipady = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainPanel.add(progressBar, gridBagConstraints);

        scrapeButton.setText("Scrape!");
        scrapeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scrapeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainPanel.add(scrapeButton, gridBagConstraints);

        statePanel.setLayout(new java.awt.GridBagLayout());

        stateLabel.setText("Status:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        statePanel.add(stateLabel, gridBagConstraints);

        stateText.setText("Idle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        statePanel.add(stateText, gridBagConstraints);

        headlessMode.setText("Headless Mode");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        statePanel.add(headlessMode, gridBagConstraints);

        divisonGroup.add(coButton);
        coButton.setSelected(true);
        coButton.setText("CO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        statePanel.add(coButton, gridBagConstraints);

        divisonGroup.add(lButton);
        lButton.setText("L");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        statePanel.add(lButton, gridBagConstraints);

        divisonGroup.add(loButton);
        loButton.setText("LO");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        statePanel.add(loButton, gridBagConstraints);

        divisonGroup.add(oButton);
        oButton.setText("O");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        statePanel.add(oButton, gridBagConstraints);

        divisonGroup.add(pccButton);
        pccButton.setText("PCC");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        statePanel.add(pccButton, gridBagConstraints);

        divisonGroup.add(pButton);
        pButton.setText("P");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        statePanel.add(pButton, gridBagConstraints);

        divisonGroup.add(ssButton);
        ssButton.setText("SS");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        statePanel.add(ssButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        mainPanel.add(statePanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(mainPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void scrapeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scrapeButtonActionPerformed
        try {
            
            if(!running) {
                
                String file = inputField.getText();
    
                BufferedReader reader = new BufferedReader(new FileReader(file));

                String [] lineData;
                
                String line = reader.readLine();
                
                while(line != null) {

                    lineData = line.split(",");

                    /* Validate Input */
                    if (!lineData[URL_IDX].contains("https://practiscore.com/results/")) {
                        stateText.setText("Invalid URL Passed. Check URLs.");
                        return;
                    }

                    if (Integer.parseInt(lineData[STGCNT_IDX]) <= 0 ) {
                        stateText.setText("Invalid stage count passed. Check stage counts.");
                        return;
                    }

                    Match match = new Match(lineData[FNAME_IDX],lineData[URL_IDX], Integer.parseInt(lineData[STGCNT_IDX]));

                    matches.add(match);
                    
                    line = reader.readLine();

                }
                
                reader.close();
    
                boolean headless = headlessMode.isSelected();
    
                String division = getSelectedButtonText(divisonGroup);
        
                /* File handling will occur in scraper constructor */
    
                /* Create the thread, add the listeners, and launch */
                scraper = new PractiScoreScraper(matches, division, headless);
    
                scraper.addProgressHandler(progHandler);
                scraper.addStateHandler(stateHandler);
    
                scraperThread = new Thread(scraper);
                
                scraperThread.start();
    
                scrapeButton.setText("Stop");
                running = true;
    
            } else {
    
                killScraper();
                stateText.setText("Idle");
                scrapeButton.setText("Scrape!");
    
            }

        } catch (Exception e) {
            stateText.setText("Invalid input file.");
        }

    }//GEN-LAST:event_scrapeButtonActionPerformed

    private void inputFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_inputFieldMouseClicked

        JFileChooser j = new JFileChooser("./");

        int r = j.showSaveDialog(null);

        if (r == JFileChooser.APPROVE_OPTION) {
            inputField.setText(j.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_inputFieldMouseClicked

    private void killScraper () {

        /* Interrupt the thread and null everything out */
        try {
            scraperThread.interrupt();
        } catch (Exception e) {}

        try {
            scraper.fwriter.close();
        } catch (IOException ex) {}
        
        scraperThread = null;
        scraper       = null;

        running = false;
    }

    public String getSelectedButtonText(ButtonGroup buttonGroup) {
        for (Enumeration<AbstractButton> buttons = buttonGroup.getElements(); buttons.hasMoreElements();) {
            AbstractButton button = buttons.nextElement();

            if (button.isSelected()) {
                return button.getText();
            }
        }

        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatDarculaLaf());
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScraperGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScraperGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton coButton;
    private javax.swing.ButtonGroup divisonGroup;
    private javax.swing.JRadioButton headlessMode;
    private javax.swing.JTextField inputField;
    private javax.swing.JRadioButton lButton;
    private javax.swing.JRadioButton loButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton oButton;
    private javax.swing.JRadioButton pButton;
    private javax.swing.JRadioButton pccButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton scrapeButton;
    private javax.swing.JRadioButton ssButton;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JPanel statePanel;
    private javax.swing.JLabel stateText;
    // End of variables declaration//GEN-END:variables
}
